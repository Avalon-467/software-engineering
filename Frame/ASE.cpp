#include <iostream>
#include <string.h> 
#include<bitset>
using namespace std;

//S盒
bitset<8> S_Box[16*16] = {
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};
//逆S盒
bitset<8>  IS_Box[16*16] = {
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

 
// 轮常数
bitset<32> Rcon[10] = 
{
	0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 
	0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
};
 

 
//循环左移一位
bitset<32>  Right(bitset<32> X)
{
	bitset<32>  L= X << 8;
	bitset<32> R = X >> 24;
	return L | R;
}
 
//进行S盒变换
bitset<32>  S_change(bitset<32> S)
{
	bitset<32> temp;
	for(int i=0; i<32; i+=8)
	{
		int L = S[i+7]*8 + S[i+6]*4 + S[i+5]*2 + S[i+4];
		int R = S[i+3]*8 + S[i+2]*4 + S[i+1]*2 + S[i];
		bitset<8> t = S_Box[16*L+R];
		for(int j=0; j<8; ++j)
			temp[i+j] = t[j];
	}
	return temp;
}
//密匙扩展
void KeyExpansion(bitset<8> key[16],bitset<32> w[44])
{
	for(int i=0;i<4;i++)
	{
		bitset<32> temp;
		temp = key[4*i].to_ulong(); 
		temp <<= 24;
		w[i] |= temp;
		temp = key[4*i+1].to_ulong();  
		temp <<= 16;
		w[i] |= temp;
		temp = key[4*i+2].to_ulong();  
		temp <<= 8;
		w[i] |= temp;
		temp = key[4*i+3].to_ulong();  
		w[i] |= temp;
	}
	for(int i=4;i<44;i++)
	{
		if(i %4 == 0)
		{
			bitset<32> t1=w[i-4];
			bitset<32> t2=w[i-1];
			bitset<32> t3=Right(t2);
			bitset<32> t4=S_change(t3);
			bitset<32> t5= Rcon[i/4-1];
			w[i] =t1^t4^t5;
		}
		else 
		{
			bitset<32> t1=w[i-4];
			bitset<32> t2=w[i-1];
			w[i] =t1^t2;
		}
	}
} 
//对密匙和偏移进行扩展
void change(string x,bitset<8> t[16])
{
	string ASCII_string;
	for (auto i : x)
	{
		bitset<8> bs(i);
		ASCII_string += bs.to_string();
	}
    bitset<128> key(ASCII_string);
	int k=128-ASCII_string.length();
	key<<=k;
	bitset<128> key1;
	for(int i=0;i<16;i++)
	{
		key1 = (key << 8*i) >> 120;
		t[i] = key1.to_ulong();
	}
}

//有限域中乘法
bitset<8> mul(bitset<8> a, bitset<8> b) 
{ 
	bitset<8> c= 0;
	bitset<8> d;
	for (int i = 0; i < 8; i++) 
	{
		if ((b & bitset<8>(1)) != 0) 
		{
			c ^= a;
		}
		d = (bitset<8>) (a & bitset<8>(0x80));
		a <<= 1;
		if (d != 0) 
		{
			a ^= 0x1b; 
		}
		b >>= 1;
	}
	return c;
}
//与扩展密匙的异或运算


void AddRoundKey(bitset<8> mtx[4*4], bitset<32> k[4])
{
	for(int i=0; i<4; ++i)
	{
		bitset<32> k1 = k[i] >> 24;
		bitset<32> k2 = (k[i] << 8) >> 24;
		bitset<32> k3 = (k[i] << 16) >> 24;
		bitset<32> k4 = (k[i] << 24) >> 24;
		
		mtx[i] = mtx[i] ^ bitset<8>(k1.to_ulong());
		mtx[i+4] = mtx[i+4] ^ bitset<8>(k2.to_ulong());
		mtx[i+8] = mtx[i+8] ^ bitset<8>(k3.to_ulong());
		mtx[i+12] = mtx[i+12] ^ bitset<8>(k4.to_ulong());
	}

}
//加密的S盒变换
void S_enchange(bitset<8> x[16])
{
	for(int i=0; i<16; ++i)
	{
		int L = x[i][7]*8 + x[i][6]*4 + x[i][5]*2 + x[i][4];
		int R = x[i][3]*8 + x[i][2]*4 + x[i][1]*2 + x[i][0];
		x[i] = S_Box[L*16+R];
	}
}


//解密的逆S盒变换
void S_DEchange(bitset<8> x[16])
{
	for(int i=0; i<16; ++i)
	{
		int L = x[i][7]*8 + x[i][6]*4 + x[i][5]*2 + x[i][4];
		int R = x[i][3]*8 + x[i][2]*4 + x[i][1]*2 + x[i][0];
		x[i] = IS_Box[L*16+R];
	}

}

//进行行变换
void Row_change(bitset<8> x[16])
{
	bitset<8> x1= x[4];
	for(int i=0; i<3; ++i)
		x[i+4] = x[i+5];
	x[7] = x1;
	for(int i=0; i<2; ++i)
	{
		bitset<8> x2 = x[i+8];
		x[i+8] = x[i+10];
		x[i+10] = x2;
	}
	bitset<8> x3 = x[15];
	for(int i=3; i>0; --i)
		x[i+12] = x[i+11];
	x[12] = x3;
}

//进行解密的逆行变换
void Row_invchange(bitset<8> x[16])
{
	bitset<8> x1 = x[7];
	for(int i=3; i>0; --i)
		x[i+4] = x[i+3];
	x[4] = x1;
	for(int i=0; i<2; ++i)
	{
		bitset<8> x2 = x[i+8];
		x[i+8] = x[i+10];
		x[i+10] = x2;
	}
	bitset<8> x3= x[12];
	for(int i=0; i<3; ++i)
		x[i+12] = x[i+13];
	x[15] = x3;
}
//进行加密的列混合操作
void Col_change(bitset<8> x[16])
{
	
	for(int i=0; i<4; ++i)
	{
		bitset<8> a[4];
		for(int j=0; j<4; ++j)
		{
			a[j] = x[i+j*4];
		}
		x[i] = mul(0x02, a[0]) ^ mul(0x03, a[1]) ^ a[2] ^ a[3];
		x[i+4] = a[0] ^ mul(0x02, a[1]) ^ mul(0x03, a[2]) ^ a[3];
		x[i+8] = a[0] ^ a[1] ^ mul(0x02, a[2]) ^ mul(0x03, a[3]);
		x[i+12] = mul(0x03, a[0]) ^ a[1] ^ a[2] ^ mul(0x02, a[3]);
	}

}
//进行解密的列混合操作
void Col_invchange(bitset<8> x[16])
{
	
	for(int i=0; i<4; ++i)
	{
		bitset<8> a[4];
		for(int j=0; j<4; ++j)
		{
			a[j] = x[i+j*4];
		}
		x[i] = mul(0x0e, a[0]) ^ mul(0x0b, a[1]) ^ mul(0x0d, a[2]) ^ mul(0x09, a[3]);
		x[i+4] = mul(0x09, a[0]) ^ mul(0x0e, a[1]) ^ mul(0x0b, a[2]) ^ mul(0x0d, a[3]);
		x[i+8] = mul(0x0d, a[0]) ^ mul(0x09, a[1]) ^ mul(0x0e, a[2]) ^ mul(0x0b, a[3]);
		x[i+12] = mul(0x0b, a[0]) ^ mul(0x0d, a[1]) ^ mul(0x09, a[2]) ^ mul(0x0e, a[3]);
	}

}
//对给定的偏移、明文、扩展密匙进行加密操作
string encrypt(bitset<8>VI [16],bitset<2816> mw, bitset<32> w[44])
{
	string sum;
	for(int t=0;t<2816/128;t++)
	{
		bitset<32> key[4];
		for(int i=0; i<4; ++i)
			key[i] = w[i];
		string k2;
		bitset<2816> mw0=(mw<<t*128)>>2688;
		bitset<128> mw1 ;
		for(int i=0;i<128;i++)
		{
			mw1[i]=mw0[i];
		}
		bitset<8> mw2[16];//明文
		bitset<128> temp;
		for(int i=0;i<16;i++)
		{
			temp = (mw1 << 8*i) >> 120;
			mw2[i] = temp.to_ulong();
		}
		for(int i=0;i<16;i++)
		{
			mw2[i]=mw2[i]^VI[i];
		}
		AddRoundKey(mw2, key);
		for(int i=1; i<10; i++)
		{
			string k;
			S_enchange(mw2);
			Row_change(mw2);
			Col_change(mw2);
			for(int j=0; j<4; ++j)
				key[i] = w[4*i+j];
			AddRoundKey(mw2, key);
		}
		S_enchange(mw2);
		Row_change(mw2);
		for(int i=0; i<4; ++i)
			key[i] = w[4*10+i];
		AddRoundKey(mw2, key);
		for(int j=0;j<16;j++)
			{
				k2+=mw2[j].to_string();
			}
		sum+=k2;
		VI=mw2;
	}
	return sum;
}
//对给定的偏移、明文、扩展密匙进行解密操作
string decrypt(bitset<8>VI [16],bitset<2816> mw, bitset<32> w[44])      
{
	string sum;
	for(int t=0;t<2816/128;t++)
	{
		bitset<32> key[4];
		for(int i=0; i<4; ++i)
			key[i] = w[40+i];
		string k2;
		bitset<2816> mw0=(mw<<t*128)>>2688;
		bitset<128> mw1 ;
		for(int i=0;i<128;i++)
		{
			mw1[i]=mw0[i];
		}
		bitset<8> mw2[16];//明文
		bitset<128> temp;
		for(int i=0;i<16;i++)
		{
			temp = (mw1 << 8*i) >> 120;
			mw2[i] = temp.to_ulong();
		}
		for(int i=0;i<16;i++)
		{
			mw2[i]=mw2[i]^VI[i];
		}
		
		AddRoundKey(mw2, key);
		for(int i=1; i<10; i++)
		{
			string k;
			S_DEchange(mw2);
			Row_invchange(mw2);
			Col_invchange(mw2);
			for(int j=0; j<4; ++j)
				key[i] = w[4*i+j];
			AddRoundKey(mw2, key);
		}
		S_DEchange(mw2);
		Row_invchange(mw2);
		for(int i=0; i<4; ++i)
			key[i] = w[4*10+i];
		AddRoundKey(mw2, key);
		for(int j=0;j<16;j++)
			{
				k2+=mw2[j].to_string();
			}
		sum+=k2;
	VI=mw2;
	}
	
	return sum;
}


int main() 
{
	string minwen="ilearnedhowtocalculatetheamountofpaperneededforaroomwheniwasatschoolyoumultiplythesquarefootageofthewallsbythecubiccontentsofthefloorandceilingcombinedanddoubleityouthenallowhalfthetotalforopeningssuchaswindowsanddoorsthenyouallowtheotherhalfformatchingthepatternthenyoudoublethewholethingagaintogiveamarginoferrorandthenyouorderthepaper";
	string mishi="weizixuan";
	string pianyi="21311309";
	bitset<32> w[44];
    string ASCII;
    bitset<8> key[16];
	change(mishi,key);
	bitset<8> VI[16];
	change(pianyi,VI);
	for (auto i : minwen)
	{
		bitset<8> bs(i);
		ASCII+= bs.to_string();
	}
	int z=16-(minwen.length())%16;
	for(int j=0;j<z;j++)
	{
		bitset<8> bs1(z);
		ASCII += bs1.to_string();
	}
    bitset<2816> mw(ASCII);
	KeyExpansion(key,w);
	string jiami=encrypt(VI,mw, w);
	cout<<jiami<<endl;
	cout<<endl;
	bitset<2816> mw1(jiami);
	string jiem=decrypt(VI,mw1, w);
	bitset<2816> jiemi(ASCII);
	cout<<jiemi<<endl;
	bitset<2816> in1(ASCII);
	bitset<8> out1[352];
	for(int i=0;i<352;i++)
	{
		bitset<2816> w1=(in1<<i*8)>>2808;
		{
			for(int j=0;j<8;j++)
				out1[i][j]=w1[j];
				
		}
	}
	for(int i=0;i<337;i++)
	{
		unsigned long o=out1[i].to_ulong();
		char c=char(o);
		cout<<c;
	}
	return 0;
}



